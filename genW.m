function W = genW(restCell, IRF_coef, LR_coef)

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % genW Function to compute matrix W to check sign restriction. I.e.
    % satisfies sign restrictions if Wq <= 0 for each shock
 
    % Inputs
    % restCell - restrictionCell - cell of restrictions
    % IRF_coef - IRF's without being multiplied by orthogonal matrix.
    %   Generated by IRF_coeff.m
    % LR_coef - LR IRF's without being multiplied by orthogonal matrix. 
    %   Generated by IRF_coeff.m
    %
    % Outputs
    % W - Sign restriction matrix
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    numvars = size(IRF_coef, 1);
    numres = size(restCell, 1);
 
    % Find unique horizons
    horizons = [];
    for ii = 1:numres
        horizons = unique([horizons restCell{ii, 3}]);
    end
    n_uniquehorizon = size(horizons, 2);
 
    % Create an easier thing to work with
    expandmat = zeros(numres, 2, n_uniquehorizon);
    for ii = 1:n_uniquehorizon
        for jj = 1:numres
            if ismember(horizons(ii), restCell{jj, 3})
                expandmat(jj, :, ii) = [restCell{jj, 1} restCell{jj, 2}];
            else
                expandmat(jj, :, ii) = zeros(1, 2);
            end
        end
    end
 
    % Create W matrix
    W = [];
    for ii = 1:n_uniquehorizon
        S = zeros(numres, numvars);
        for jj = 1:numres
            if any(expandmat(jj, :, ii))
                S(jj, jj) = expandmat(jj, 2, ii);
            end
        end
     
        % For LR restrictions
        if horizons(ii) == Inf
            IRF = LR_coef;
        else
            IRF = IRF_coef(:, :, horizons(ii) + 1);
        end
     
        W = [W; S * IRF];
    end
end

